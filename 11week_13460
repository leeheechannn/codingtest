#-*- coding:utf-8 -*-
from collections import deque
import sys, copy

def Find_RB(Graph):
    global Row, Column
    local_RB = [[0] * 2 for _ in range(2)]

    for i in range(Row):
        for j in range(Column):
            if Graph[i][j] == 'R':
                local_RB[0] = [i, j]
            if Graph[i][j] == 'B':
                local_RB[1] = [i, j]
    return local_RB
        
def Check_Continue(Graph):
    global Row, Column
    global RB
    RB = Find_RB(Graph)
    #RB[0] = R의 위치, RB[1] = B의 위치
    RB_Check=[[0]*4 for _ in range(2)]
    #RB_Check[0][0] = R의 Right RB_Check[0][1] = R의 Down
    #RB_Check[0][2] = R의 Left RB_Check[0][3] = R의 Up
    #RB_Check[1][0] = B의 Right RB_Check[1][1] = B의 Down
    #RB_Check[1][2] = B의 Left RB_Check[1][3] = B의 Up

    #Check Red 
    if RB[0][1]+1 < Column and Graph[RB[0][0]][RB[0][1]+1] != '#' and Graph[RB[0][0]][RB[0][1]+1] != 'B':
        RB_Check[0][0] = 1
    if RB[0][0]+1 < Row and Graph[RB[0][0]+1][RB[0][1]] != '#' and Graph[RB[0][0]+1][RB[0][1]] != 'B':
        RB_Check[0][1] = 1
    if RB[0][1]-1 >= 0 and Graph[RB[0][0]][RB[0][1]-1] != '#' and Graph[RB[0][0]][RB[0][1]-1] != 'B':
        RB_Check[0][2] = 1
    if RB[0][0]-1 >=0 and Graph[RB[0][0]-1][RB[0][1]] != '#' and Graph[RB[0][0]-1][RB[0][1]] != 'B':
        RB_Check[0][3] = 1

    #Check Blue
    if RB[1][1]+1 < Column and Graph[RB[1][0]][RB[1][1]+1] != '#' and Graph[RB[1][0]][RB[1][1]+1] != 'R':
        RB_Check[1][0] = 1
    if RB[1][0]+1 < Row and Graph[RB[1][0]+1][RB[1][1]] != '#' and Graph[RB[1][0]+1][RB[1][1]] != 'R':
        RB_Check[1][1] = 1
    if RB[1][1]-1 >= 0 and Graph[RB[1][0]][RB[1][1]-1] != '#' and Graph[RB[1][0]][RB[1][1]-1] != 'R':
        RB_Check[1][2] = 1
    if RB[1][0]-1 >=0 and Graph[RB[1][0]-1][RB[1][0]] != '#' and Graph[RB[1][0]-1][RB[1][1]] != 'R':
        RB_Check[1][3] = 1

    return RB_Check
    
# Direction = 오른쪽(0, +1), 아래(+1, 0), 왼쪽(0, -1), 위쪽(-1,0) 
def Go(Check_Graph, Direction):
    global Row, Column, RB
    Graph = copy.deepcopy(Check_Graph)
    Current_Red_Row = RB[0][0]
    Current_Red_Column = RB[0][1]
    Current_Blue_Row = RB[1][0]
    Current_Blue_Column = RB[1][1]
    Red_Row=Current_Red_Row
    Red_Column = Current_Red_Column
    Blue_Row = Current_Blue_Row
    Blue_Column = Current_Blue_Column

    # 0번은 구멍에 빠짐, 1번은 벽에 만남
    finish = [[0]*2 for _ in range(2)]
    
    while(1):
        Red_Row += Direction[0]
        Red_Column += Direction[1]
        Blue_Row += Direction[0]
        Blue_Column += Direction[1]

        if 0 <= Red_Row < Row and 0<= Red_Column < Column and finish[0][0] != 1 and finish[0][1] != 1:
            if Graph[Red_Row][Red_Column] == '.' or (0<=Red_Row+Direction[0] < Row and 0<=Red_Column +Direction[1] < Column and Graph[Red_Row][Red_Column] == 'B' and Graph[Red_Row+Direction[0]][Red_Column+Direction[1]] == '.'):
                if Graph[Current_Red_Row][Current_Red_Column] != 'B':
                    Graph[Current_Red_Row][Current_Red_Column] = '.'
                Graph[Red_Row][Red_Column] = 'R'
            elif Graph[Red_Row][Red_Column] == 'O':
                Graph[Current_Red_Row][Current_Red_Column] = '.'
                finish[0][0] = 1
            else:
                finish[0][1] = 1

        if 0<= Blue_Row <Row and 0<= Blue_Column < Column and finish[1][0] != 1 and finish[1][1] != 1:
            if  Graph[Blue_Row][Blue_Column] == '.' or (0<Blue_Row+Direction[0] <Row and 0<= Blue_Column+Direction[1] < Column and Graph[Blue_Row][Blue_Column] == 'R' and Graph[Blue_Row+Direction[0]][Blue_Column+DIrection[1]] == '.'):
                if Graph[Current_Blue_Row][Current_Blue_Column] != 'R':
                    Graph[Current_Blue_Row][Current_Blue_Column] = '.'
                Graph[Blue_Row][Blue_Column] = 'B'
            elif Graph[Blue_Row][Blue_Column] == 'O':
                Graph[Current_Blue_Row][Current_Blue_Column] = '.'
                finish[1][0] = 1
            else:
                finish[1][1] = 1

        if finish[0][0] == 1 and finish[1][0] == 1:
            return Graph, 'Fail'
        elif finish[0][0] == 1 and finish[1][1] == 1:
            return Graph, 'Success'
        elif finish[0][1] ==1 and finish[1][0] == 1:
            return Graph, 'Fail'
        elif finish[0][1] == 1 and finish[1][1] == 1:
            return Graph, 'Continue'

        Current_Red_Row = Red_Row
        Current_Red_Column = Red_Column 
        Current_Blue_Row= Blue_Row 
        Current_Blue_Column = Blue_Column
   
#RB_Check[0][0] = R의 Right RB_Check[0][1] = R의 Down
#RB_Check[0][2] = R의 Left RB_Check[0][3] = R의 Up
#RB_Check[1][0] = B의 Right RB_Check[1][1] = B의 Down
#RB_Check[1][2] = B의 Left RB_Check[1][3] = B의 Up
def Marble_Escape():
    global Row, Column, Graph
    global Graph_que, Min_Count
    Min_Count = 1
    Count_Time = 1
    result = [['.'] for _ in range(4)]
    Graph_que = deque()
    Graph_que.append(Graph)

    while(1):
        if Count_Time <= 0:
            return -1
        Count_Thistime=Count_Time
        Count_Time = 0
        for _ in range(Count_Thistime):
            Check_Graph = Graph_que.popleft()
            RB_Check = Check_Continue(Check_Graph)
            if 1 in RB_Check[0] or 1 in RB_Check[1]:
                #오른쪽 아래 왼쪽 위
                if RB_Check[0][0] == 1 or RB_Check[1][0] ==1:
                    Return_Graph, result[0] = Go(Check_Graph, [0, 1])
                    if result[0] == 'Continue':
                        Graph_que.append(Return_Graph)
                        Count_Time +=1                   
                if RB_Check[0][1] == 1 or RB_Check[1][1] ==1:
                    Return_Graph, result[1] = Go(Check_Graph, [1, 0])
                    if result[1] == 'Continue':
                        Graph_que.append(Return_Graph)
                        Count_Time +=1
                if RB_Check[0][2] == 1 or RB_Check[1][2] ==1:
                    Return_Graph, result[2] = Go(Check_Graph, [0, -1])
                    if result[2] == 'Continue':
                        Graph_que.append(Return_Graph)
                        Count_Time +=1
                if RB_Check[0][3] == 1 or RB_Check[1][3] ==1:
                    Return_Graph, result[3] = Go(Check_Graph, [-1, 0])
                    if result[3] == 'Continue':
                        Graph_que.append(Return_Graph)
                        Count_Time +=1
            else:
                return -1

            if 'Success' in result:
                return Min_Count
            elif Min_Count > 10:
                return -1

        Min_Count += 1


Row, Column = map(int, sys.stdin.readline().split())
Graph = [list(sys.stdin.readline().rstrip()) for _ in range(Row)]

print(f'{Marble_Escape()}')
