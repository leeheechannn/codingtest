개념 : 하나의 큰 문제를 여러 개의 작은 문제로 나누어서 그결과를 저장하여 다시 큰 문제를 해결할 때 사용

DP (Danymic Programing) : 동적계획법

일반적인 재귀와의 차이 : 일반적인 재귀를 단순히 사용 시 동일한 작은 문제를 여러 번 반복되어 비효율적인 계산이 됨 

DP 사용 조건
 1. Overlapping Subproblems(겹치는 부분 문제)
 2. Optimal Substructre(최적 부분 구조)

1. 동일한 작은 문제들이 반복하여 나타나야함
  - 피보나치처럼 동일한 값이 계속 사용되는 경우 사용할 수 있다.
2. 부분 문제의 최적 결과 값을 사용해 전체 문제의 최적 결과를 낼 수 있는 경우
  - 최단 경로 찾는 문제처럼 A-X 최단 거리 + X-B 최단 거리가 A-B 최단 거리가 된다.
  
DP 사용 과정
 - DP로 풀수있는지 확인
 - 문제의 변수 파악
   ▷ 문제 내 전달해야하는 변수 파악 = state
 - 변 수 간 관계식 만들기(점화식)
 - 메모하기
   ▷ 변수의 값에 따른 결과를 저장
   ▷ 보통 배열 사용
 - 기저 상태 파악
   ▷ 가장 작은 문제의 상태 파악
 - 구현
   ▷ Bottom-up (Tabulation 방식) : 반복문 사용
   ▷ Top-DOwn (Memoization 방식) : 재귀 사용

Bottom-up 방식 : 아래에서부터 계산을 수행하고 누적시켜서 전체 큰 문제를 해결하는 방식
  - Tabulation 방식 : dp[0] 부터 하나씩 채워나가고 직접 메모리에 접근해서 사용하는 방식 (=Memorization 방식과 유사)

Top-down 방식 : 위에서 부터 호출한다음 dp[0]까지 내려가고 다음 해당 결과 값을 재귀를 통해 전이시켜 재활용하는 방식 
  - 
