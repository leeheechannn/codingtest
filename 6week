# 백준 17081번

# . : 자유롭게 입장할 수 있는 칸
# # : 막힌 칸 
# B : 아이템 상자 - 무기(W), 갑옷(A), 장신구(O)
## 무기 방아구는 얻자마자 바로 장비로 교체
## 장신구는 동일한 장신구가 없고 칸이 남아있는 경우에만 착용 가능
## 아이템 상자를 연 경우는 아이템 상자가 있는 칸으로 이동한다.

# ^ : 가시 함정 : 5의 데미지를 입으며 사망까지 할 수 있다.
## 함정은 사라지지 않으며 제자리에서 움직이는 경우에는 또 데미지를 입는다. 

# & : 몬스터 : 알파벳 대소문자 문자열로 된 이름, 정수로 표시되는 공격력 + 방어력 + 체력 + 경험치를 갖고있다.
## 주인공 캐릭터가 항상 선공하며 한번씩 번걸아가며 max(1, 내공격력 - 상대의 방어력) 만큼 데미지를 입히며 체력이 0이하가 되면 전투는 즉시 종료
## 몬스터가 사망하면 그자리는 빈칸이 되며 그 자리로 이동

# M : 보스 몬스터 : 게임 목표 

# 주인공 배열
## 체력 + 공격력 + 방어력 : 정수로표시 되며 초기값은 체력 : 20, 공격력 : 2, 방어력 : 2이다.
## 경험치 : 처음엔 레벨 1이며 레벨 N에서 N+1이 되기 위해서는 5XN의 경험치가 필요하다.
## 레벨업을 하게되면 남는 경험치는 버린다.
## 무기는 한개만 착용가능하며 값이 주인공의 공격력에 더해지며 가장 먼저 적용됨
## 방어구 : 한개만 착용 가능
## 장신구 : 최대 4개 까지착용가능하다 같은 효과를 가지는 건 하나까지만 착용 가능
### HR : 전투에서 승리할 때마다 체력 3회복하며 최대 체력 수치까지만 회복
### RE : 주인공이 사망했을 때 사라지는데 최대 체력으로 부활(나, 몬스터) 시키고 첫 시작 위치로 돌려보낸다. 나머지는 그대로
### CO : 모든 전투에서, 첫번째 공격에서 주인공의 공격력이 두배로 적용
### EX : 얻는 경험치가 1.2배가되며 소수점 아래는 버린다.
### DX : 가시 함정에 입는 데미지가 1로 고정되며, CO랑 같이 착용하면 CO의 공격력 효과가 3배가 된다.
### HU : 보스 몬스터와 전투에 돌입하는 순간 체력을 최대치까지 회복하고, 보스 몬스터의 첫 공격에 0의 데미지를 입음
### CU: 아무 능력없이 칸 만 차지함

# 주인공은 LRUD 아무거나 수행하며 움직일 수 없는 경우 그자리에 멈춘다.
# 게임 종료 조건 : 보스몬스터 처치, 주인공 사망, 모든 커맨드 수행
## 보스몬스터 처치시에는 모든 경험치를 받고 장신구의 효과를 받은상태에서 종료 

# 결과 출력
## 주인공의 위치를 포함한 그리드 상태(주인공이 죽은경우 주인공은 없어짐)
##진행된 턴수 = 'Passed Turns : T', 게임은 0턴에서 시작
##주인공의 정보 순차적 출력
### 'LV : 레벨'
### 'HP : 남은 체력/최대 체력'
### 'ATT : '무기가적용되지 않은 공격력+착용중인 무기의 공격력' 
### 'DEF : 방어구가 적용되지 않은 주인공 방어력+착용중인 방어구의 방어력'
### 'EXP : 현재 경험치량/다음레벨이되는데에 필요한 총 경험치량'

#마지막 결과 출력 
## 보스 몬스터 처지 = 'YOU WIN!'
## 죽었을 경우 : 'YOU HAVE BEEN KILLED BY 몬스터이름/SPIKE TRAP..'
## 임력이 끝났을 경우 : 'Press any key to continue.'


# 입력값
## N, M의 그리드
## 보스몬스터와 주인공은 하나씩 만 존재
## 주인공 이동 방향 문자열
## 보스몬스터를 포함한 전체 몬스터에대한 정보가 K 줄에걸쳐서 입력
### 줄 + 열 + 몬스터이름 문자열 + 몬스터 공격력 + 몬스터 방어력 + 몬스터 최대 체력 + 경험치
##이후 아이템 L 줄에 걸쳐 정보
### 줄 + 열 + W / A / O + 
#### W, A 인 경우 + 공격력 / 방어력
#### O 인경우 + 문자열

# 입력
# - 그리드 구성하는 2차원 배열
# - 주인공 이동 문자열 → 리스트로 변경
# - 몬스터 정보 : 2차원 리스트로 전체 K 개수의 리스트 입력
# - 아이템 정보 : 2차원 리스트로 전체 L 개수의 리스트 입력

# 함수
# - 메인 함수
# -- 반복문을 돌면서 주인공이 이동 
# -- 다음 순서일 때 만나는 문자열에 따른 각각 다른 함수로 진행
# --- 아이템, 몬스터, 벽, 보스, 가시, 빈 공간
# 이동한 이후 현재 상태를 파악해서 주인공 및 그리드 상태 업데이트
# 종료 조건을 만날 때 까지 계속 수행하며 끝나는 경우 Return 


#
# - 아이템 함수   

# - 몬스터 함수

# - 벽 함수

# - 보스 함수

# - 가시 함수

# - 빈 공간 함수

# - 출력 함수

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
#-*- coding:utf-8 -*-

# 그리드 내 몬스터 개수 파악하는 함수
def Couting_Monster():
    global Greedy, Row, Col
    Count = 0
    for i in range(Row):
        for j in range(Col):
            if Greedy[i][j] == '&' or Greedy[i][j] == 'M':
                Count = Count + 1
    return Count

# 그리드 내 아이템 개수 및 순서 파악하는 함수
def Couting_Item():
    global Greedy, Row, Col
    Count = 0
    Coordinate = []
    for i in range(Row):
        for j in range(Col):
            if Greedy[i][j] == 'B':
                Count = Count + 1
                Coordinate.apend([Row, Col])
    return Coordinate, Count


# 아이템칸 만났을 때
# 아이템 정보 : 0 : 열(1부터 시작)0, 1 : 행(1부터 시작), 2: 장비 종류 3 : 장비 효과 및 무기/방어구 수치
# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7)
def Meet_Item():
    global Item, Num_Item, Character, Current_Row, Current_Col
    # 해당 위치에 어떤 아이템이 있는지 확인
    for i in range(Num_Item):
        if Current_Row == Item[i][0]-1 and Current_Col == Item[i][1]-1:
            break
    # 종류에 따라서 다르게 처리
    if Item[i][2] == 'W':
        # 캐릭터 무기 바꾸기
        Character[2] = Character[2] - Character[5]
        Character[5] = Item[i][3]
        Character[2] = Character[2] + Character[5]

    elif Item[i][2] == 'A':
        # 캐릭터 방어구 바꾸기
        Character[3] = Character[3] - Character[6]
        Character[5] = Item[i][3]
        Character[2] = Character[2] + Character[6]

    elif Item[i][2] == 'O':
        # 캐릭터에 장신구 넣기
        if len(Character[7])>=4:
            pass
        else:
            Character[7].append(Item[3])
 
    return

# 일반 몬스터 만났을 때 함수(리턴 = 전투 결과)
# 몬스터 정보 : 0 : 열(1부터 시작)0, 1 : 행(1부터 시작), 2: 몬스터 이름(문자열), 3 : 공격력, 4 : 방어력, 5 : 최대 체력, 6 : 경험치
# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7)
def Meet_Monster():
    # 해당 위치에 어떤 몬스터가 있는지 확인
    global Monster, Num_Monster, Character, Current_Row, Current_Col
    for i in range(Num_Monster):
        if Current_Row == Monster[i][0]-1 and Current_Col == Monster[i][1]-1:
            break
    # 배틀 시작
    while(1):
        Monster[i][5] = Monster[i][5] - max(1, Character[2] - Monster[i][4])
        if Monster[i][5] <= 0:
            case = 1
            break
        ###아이템 효과 확인 필요
        Character[1] = Character[1] - max(1, Monster[i][3] - Character[3])
        if Character[1] <= 0:
            case = 2
            break
    
    # 몬스터가 죽음
    if case == 1:
        Character[4] = Character[4] + Monster[6]
        if Character[4] >= Character[0] * 5:
            Character[0] = Character[1] + 1
            Character[4] = 0
        else:
            pass

    # 캐릭터가 죽음
    else:
        Character[1] = 0

    return case


# 벽 만났을 때 or 제자리에 있는 경우
# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7)
#def Meet_Wall(Greedy, Character, Row, Col):
#   return


# 보스 몬스터 만났을 때
# 몬스터 정보 : 0 : 열(1부터 시작)0, 1 : 행(1부터 시작), 2: 몬스터 이름(문자열), 3 : 공격력, 4 : 방어력, 5 : 최대 체력, 6 : 경험치
# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7)
def Meet_Bose():
    global Monster, Num_Monster, Character, Current_Row, Current_Col

    # 해당 위치에 어떤 몬스터가 있는지 확인
    for i in range(Num_Monster):
        if Current_Row == Monster[i][0]-1 and Current_Col == Monster[i][1]-1:
            break

    # 배틀 시작
    while(1):
        Monster[i][5] = Monster[i][5] - max(1, Character[2] - Monster[i][4])
        if Monster[i][5] <= 0:
            case = 1
            break
        ###아이템 효과 확인 필요
        Character[1] = Character[1] - max(1, Monster[i][3] - Character[3])
        if Character[1] <= 0:
            case = 2
            break
    
    # 몬스터가 죽음
    if case == 1:
        Character[4] = Character[4] + Monster[6]
        if Character[4] >= Character[0] * 5:
            Character[0] = Character[1] + 1
            Character[4] = 0
        else:
            pass

    # 캐릭터가 죽음
    else:
        Character[1] = 0

    return case

# 함정 만났을 때(주인공 죽는지 리턴)
# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7)
def Meet_Trap():
    global Character
    Character[1] = Character[1] - 5
    if Character[1] <= 0:
        Character[1] = 0
        case = 2
    else:
        case = 1
    return case

# 이동가능한 영역으로 이동했을 때
#def Meet_Empty(Character, Now_Row, Now_Col):
#
#    return


# 이동 후 해당 위치 상태 파악
# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7)
def RPG_Game_Stage():
    global Greedy, Character, Movement, Turn, Current_Row, Current_Col

    Greedy_Status = Greedy[Current_Row][Current_Col]
    if Greedy_Status == '.':
        case = 1
        Turn = Turn + 1
        return case

    elif Greedy_Status == 'B':
        case = 2
        Turn = Turn + 1
        Meet_Item()
        return case

    elif Greedy_Status == '^':
        case = 3
        result = Meet_Trap()
        # 캐릭터 죽으면 == 2
        if result == 1:
            Print_Result(case)
            exit()
        return case

    elif Greedy_Status == '&':
        case = 4
        result = Meet_Monster()
        # 캐릭터 죽으면 == 2, 몬스터가 죽으면 == 1
        if result == 2:
            Print_Result(case)
            exit()
        return case

    elif Greedy_Status == 'M':
        case = 5
        result = Meet_Bose()
        if result == 2:
            Print_Result(case)
            exit()

        return case

    return

# 결과 출력 함수
def Print_Result():
    return

# 메인 함수
def RPG_Game():
    global Greedy, Movement, Row, Col
    global Current_Row, Current_Col

    Current_Row = 0, Current_Col = 0

    for i in range(len(Movement)):
        if Movement[i] == 'L':
            Current_Col = Current_Col - 1
            if Current_Col < 0 or Greedy[Current_Row][Current_Col] == '#':
                Current_Col = Current_Col + 1
            RPG_Game_Stage(Greedy, Current_Row, Current_Col)

        elif Movement[i] == 'R':
            Current_Col = Current_Col + 1
            if Current_Col > Col-1 or Greedy[Current_Row][Current_Col] == '#':
                Current_Col = Current_Col - 1
            RPG_Game_Stage(Greedy, Current_Row, Current_Col)

        elif Movement[i] == 'U':
            Current_Row = Current_Row - 1
            if Current_Row < 0 or Greedy[Current_Row][Current_Col] == '#':
                Current_Row = Current_Row + 1
            RPG_Game_Stage(Greedy, Current_Row, Current_Col)

        elif Movement[i] == 'D':
            Current_Row = Current_Row + 1
            if Current_Row > Row-1 or Greedy[Current_Row][Current_Col] == '#':
                Current_Row = Current_Row - 1
            RPG_Game_Stage(Greedy, Current_Row, Current_Col)
            
    return

# 주인공 정보 = 레벨(0), 체력(1), 공격력(2), 방어력(3), 경험치(4), 무기(5), 방어구(6), 장신구(7) 
# 초기 레벨 = 1, 체력 = 20, 공격력 = 2, 방어력 = 2, 경험치 = 0, 무기/방어구/장신구 = 빈칸

Character = [1, 20, 2, 2, 0, 0, 0, []]
Turn = 0

# 전체 그리드의 크기 입력
Row, Col = map(int, input().split())

# 초기 그리드 입력
Greedy = [list(input().split()) for _ in range(Row)]

# 주인공 전체 이동
Movement = list(input().split())

# 그리드 내 몬스터 및 아이템 개수 파악
Num_Monster = Couting_Monster()
Coordinate_Item, Num_Item = Couting_Item()

# 몬스터 및 아이템 정보 입력
# 0 : 열(1부터 시작)0, 1 : 행(1부터 시작), 2: 몬스터 이름(문자열), 3 : 공격력, 4 : 방어력, 5 : 최대 체력, 6 : 경험치
Monster = [list(input.split()) for _ in range(Num_Monster)]

# 0 : 열(1부터 시작)0, 1 : 행(1부터 시작), 2: 장비 종류 3 : 장비 효과 및 무기/방어구 수치
Item = [list(input.split()) for _ in range(Num_Item)]


RPG_Game()
Print_Result()
