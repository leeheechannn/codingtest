탐색 : 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정

DFS/BFS의 기본 자료구조 = 스택과 큐

자료구조 : 데이터를 표현하고 관리하고 처리하기 위한 구조 

스택과 큐 고려 사항
 - 삽입, 삭제, 오버플로, 언더플로
 
 스택
 선입후출, 후입선출 구조(First in Last out / Last in First out)
 
 큐
 공정한 자료구조
 선입선출(First in FIrst out)
 파이썬에서 큐 구현할때는 COllection 모듈에서 제공하는 deque 자료구조 활용
 ---
 from collections import deque
 
 queue = deque()
 
 queue.popleft() / queue.reverse()
 ---
 
재귀함수 : 자기 자신을 다시 호출하는 함수
 재귀함수는 종료조건을 무조건 명시해줘야한다.
 재귀함수는 내부적으로 스택 자료구조와 동일하게 수행한다.
 
DFS(Depth-Frist Search) : 깊이 우선 탐색, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
 최대한 멀리있는 노드부터 탐색하는 알고리즘
 DFS는 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후 다시 돌아가 다른 경로 탐색하는 알고리즘
 구체적인 동작과정
    1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
    2. 스태그이 최상단 노드에 방문하지 않은 인접노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리
    2-1. 방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 꺼낸다.
    3. 2, 2-1번 과정을 더이상 수행할 수 없을 때까지 반복한다.

BFS(Breadth Frist Search) : 너비 우선탐색, 가까운 노드부터 탐색하는 알고리즘
 선입선출 방식인 큐 자료구조를 이용하는 것이 정석 
 자세한 동작 방식
    1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
    2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입 하고 방문 처ㅣㄹ
    3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복
 

그래프 : 노드(정점)와 간선으로 표현
 그래프탐색은 하나의 노드를 시작으로 다수의 노드를 방문하는 것으로 두노드가 간선으로 연결되어 있는 경우 두노드는 인접하다라고 표현한다.
 그래프 방식
  1. 인접 행렬(Adjancency Matrix) : 2차원 배열로 그래프의 연결상태를 표현하는 방식
    - 단순히 파이썬에서 2차원 배열로 구현
  2. 인접 리스트(Adjancency List) : 리스트로 그래프의 연결 관계를 표현하는 방식 
    - 연결 리스트라는 자료구조를 이용하여 구현
  
 
