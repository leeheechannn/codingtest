Back-up

from collections import deque
import copy

n = 6
wires = [[1, 4], [6, 3], [2, 5], [5, 1], [5, 3]]
Check_append = [0] * (n+1)
count = 0
stack = []
temp_thistime = []
temp = []
temp2 = []
result = []
result2 = []
test = []
score = [[] for _ in range(n+1)]
check = 0

for i in range(len(wires)):
    score[wires[i][0]].append(wires[i][1])
    score[wires[i][1]].append(wires[i][0])


stack.append([1, 1])
Check_append[1] = 1

while stack:
    count = 0
    temp_thistime = stack.pop()
    Check_append[temp_thistime[0]] = 1
    temp.append(temp_thistime)
    for i in range(0, len(score[temp_thistime[0]])):
        if Check_append[score[temp_thistime[0]][i]] == 0:
            stack.append([score[temp_thistime[0]][i], temp_thistime[1]+len(score[score[temp_thistime[0]][i]])-1])
            count += 1
        else:
            pass

    if count == 0:
        temp2 = copy.deepcopy(temp)
        result.insert(len(result), temp2)
        temp.pop()
       
        while 1:
            check = 0
            if not temp:
                break

            for i in range(0, len(score[temp[len(temp)-1][0]])):
                if Check_append[score[temp[len(temp)-1][0]][i]] == 0:
                    check += 1
                    break

            if check == 0:
                temp.pop()
            else:
                break
    else:
        pass

#전체 가질 수 있는 값 중에서 젤 긴거 구하기
result.sort(key=len)
for i in range(0, len(result[len(result)-1])):
    result2.append(result[len(result)-1][i][0])


#계산한 젤 긴 라인에서 최솟값 찾기
for i in range(0, len(result[len(result)-1])):
    test.append(abs(abs(n-result[len(result)-1][i][1]) - result[len(result)-1][i][1]))
test.sort()
answer = test[0]

print(f'{answer}')


import copy

n = 3
wires = [[1, 2], [1, 3]]
Tree = [[] for _ in range(n+1)]
check = 0

Check_append = [0] * (n+1)
count = 0
stack = []
temp_thistime = 0
temp = []
temp2 = []
result = []
find_result = []
test = []


for i in range(len(wires)):
    Tree[wires[i][0]].append(wires[i][1])
    Tree[wires[i][1]].append(wires[i][0])


stack.append(1)
Check_append[1] = 1

while stack:
    count = 0
    temp_thistime = stack.pop()
    Check_append[temp_thistime] = 1
    temp.append(temp_thistime)
    for i in range(0, len(Tree[temp_thistime])):
        if Check_append[Tree[temp_thistime][i]] == 0:
            stack.append(Tree[temp_thistime][i])
            count += 1
        else:
            pass

    if count == 0:
        temp2 = copy.deepcopy(temp)
        result.insert(len(result), temp2)
        temp.pop()
       
        while 1:
            check = 0
            if not temp:
                break

            for i in range(0, len(Tree[temp[len(temp)-1]])):
                if Check_append[Tree[temp[len(temp)-1]][i]] == 0:
                    check += 1
                    break

            if check == 0:
                temp.pop()
            else:
                break
    else:
        pass

result.sort(key=len, reverse=True)
temp_result = result[0]

find_result.append(1)
for i in range(0, len(temp_result)-1):
    Check_append = [0] * (n+1)
    Tree_temp = Tree
    count = 0
    front = temp_result[i]
    rear = temp_result[i+1]

    Tree_temp[rear].remove(front)
    stack.append(rear)
    Check_append[rear] = 1
    while stack:
        count += 1
        temp_thistime = stack.pop()
        for j in range(0, len(Tree[temp_thistime])):
            if Check_append[Tree[temp_thistime][j]] == 0:
                stack.append(Tree[temp_thistime][j])
                Check_append[Tree[temp_thistime][j]] = 1
    find_result.append(count)
       

for i in range(0, len(find_result)):
    test.append(abs(abs(n-find_result[i]) - find_result[i]))
test.sort()
answer = test[0]

print(f'{answer}')

=============================

import copy

n = 7
wires = [[1,2],[2,7],[3,7],[3,4],[4,5],[6,7]]
Tree = [[] for _ in range(n+1)]
Tree_asc = [[] for _ in range(n+1)]
check = 0

Check_append = [0] * (n+1)
count = 0
stack = []
temp_thistime = 0
temp = []
temp2 = []
result = []
find_result = []
test = []


for i in range(len(wires)):
    Tree[wires[i][0]].append(wires[i][1])
    Tree_asc[wires[i][0]].append(wires[i][1])
    Tree[wires[i][1]].append(wires[i][0])

#Tree

for i in range(1, n):
    for j in range(0, len(Tree_asc[i])):
        Check_append = [0] * (n+1)
        Tree_temp = Tree
        count = 0
        front = i
        rear = Tree_asc[i][j]

        Tree_temp[rear].remove(front)
        stack.append(rear)
        Check_append[rear] = 1
        while stack:
            count += 1
            temp_thistime = stack.pop()
            for k in range(0, len(Tree_temp[temp_thistime])):
                if Check_append[Tree_temp[temp_thistime][k]] == 0:
                    stack.append(Tree_temp[temp_thistime][k])
                    Check_append[Tree_temp[temp_thistime][k]] = 1
        find_result.append(abs(abs(n-count)-count))

answer = min(find_result)
print(f'{answer}')



